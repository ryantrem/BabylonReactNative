#include <jni.h>

#include <Babylon/JsRuntime.h>
#include <Babylon/NativeWindow.h>
#include <Babylon/NativeEngine.h>

#include <arcana/threading/task_schedulers.h>

#include <JavaScriptCore/JavaScript.h>

#include <android/log.h>
#include <android/native_window.h>
#include <android/native_window_jni.h>

#include <optional>
#include <sstream>
#include <unistd.h>

#include <jsi/jsi.h>

using namespace facebook;

namespace Babylon
{
    namespace
    {
        void log(const char *str)
        {
            __android_log_print(ANDROID_LOG_VERBOSE, "BabylonNative", "%s", str);
        }
    }

    class Native final
    {
    public:
        // This class must be constructed from the JavaScript thread
        Native(JSGlobalContextRef jsContext, ANativeWindow* windowPtr)
        : m_env{ Napi::Attach(jsContext) }
        {
            auto looper_scheduler = std::make_shared<looper_scheduler_t>(looper_scheduler_t::get_for_current_thread());

            JsRuntime::DispatchFunctionT dispatchFunction{[env = m_env, looper_scheduler = std::move(looper_scheduler)](std::function<void(Napi::Env)> func) {
                (*looper_scheduler)([env, func = std::move(func)]()
                {
                    func(env);
                });
            }};

            JsRuntime::CreateForJavaScript(m_env, dispatchFunction);

            auto width = static_cast<size_t>(ANativeWindow_getWidth(windowPtr));
            auto height = static_cast<size_t>(ANativeWindow_getHeight(windowPtr));

            InitializeGraphics(windowPtr, width, height);
            InitializeNativeEngine(m_env);
            NativeWindow::Initialize(m_env, windowPtr, width, height);

            // TODO: This shouldn't be necessary, but for some reason results in a significant increase in frame rate. Need to figure this out.
            ReinitializeNativeEngine(m_env, windowPtr, width, height);
        }

        ~Native()
        {
            DeinitializeGraphics();
        }

        void Refresh(ANativeWindow* windowPtr)
        {
            auto width = static_cast<size_t>(ANativeWindow_getWidth(windowPtr));
            auto height = static_cast<size_t>(ANativeWindow_getHeight(windowPtr));
            ReinitializeNativeEngine(m_env, windowPtr, width, height);
        }

    private:
        using looper_scheduler_t = arcana::looper_scheduler<sizeof(std::weak_ptr<Napi::Env>) + sizeof(std::function<void(Napi::Env)>)>;
        Napi::Env m_env;
    };
}

extern "C" JNIEXPORT jlong JNICALL Java_com_reactlibrary_BabylonNativeInterop_create(JNIEnv* env, jclass obj, jlong jsContextRef, jobject surface)
{
    auto jsContext = reinterpret_cast<JSGlobalContextRef>(jsContextRef);
    ANativeWindow* windowPtr = ANativeWindow_fromSurface(env, surface);
    auto native = new Babylon::Native(jsContext, windowPtr);
    return reinterpret_cast<intptr_t>(native);
}

extern "C" JNIEXPORT void JNICALL Java_com_reactlibrary_BabylonNativeInterop_refresh(JNIEnv* env, jclass obj, jlong instanceRef, jobject surface)
{
    auto native = reinterpret_cast<Babylon::Native*>(instanceRef);
    ANativeWindow* windowPtr = ANativeWindow_fromSurface(env, surface);
    native->Refresh(windowPtr);
}

extern "C" JNIEXPORT void JNICALL Java_com_reactlibrary_BabylonNativeInterop_destroy(JNIEnv* env, jclass obj, jlong instanceRef)
{
    auto native = reinterpret_cast<Babylon::Native*>(instanceRef);
    delete native;
}

extern "C" JNIEXPORT void JNICALL Java_com_reactlibrary_BabylonNativeInterop_testJSI(JNIEnv* env, jclass obj, jlong jsRuntimeHandle)
{
    auto &jsiRuntime = *(jsi::Runtime*)jsRuntimeHandle;

    // Global variable
    {
        jsiRuntime.global().setProperty(jsiRuntime, "testValue", jsi::Value(42));
    }

    // Global object
    {
        jsi::Object testObj(jsiRuntime);
        testObj.setProperty(jsiRuntime, "testProperty", jsi::Value(jsiRuntime, jsi::String::createFromAscii(jsiRuntime, "this is a test property")));
        jsiRuntime.global().setProperty(jsiRuntime, "testObject", std::move(testObj));
    }

    // Global function
    {
        auto testFunction = jsi::Function::createFromHostFunction(jsiRuntime, jsi::PropNameID::forAscii(jsiRuntime, "testFunction"), 1, [](jsi::Runtime& runtime, const jsi::Value& thisValue, const jsi::Value* arguments, size_t count) -> jsi::Value
        {
            auto numberArg = arguments[0].asNumber();
            return jsi::Value(numberArg * numberArg);
        });
        jsiRuntime.global().setProperty(jsiRuntime, "testFunction", std::move(testFunction));
    }

    // Callback
    {
        auto testFunction = jsi::Function::createFromHostFunction(jsiRuntime, jsi::PropNameID::forAscii(jsiRuntime, "testCallback"), 1, [](jsi::Runtime& runtime, const jsi::Value& thisValue, const jsi::Value* arguments, size_t count) -> jsi::Value
        {
            auto callback = arguments[0].asObject(runtime).asFunction(runtime);
            callback.call(runtime, "string passed from C++");
            return nullptr;
        });
        jsiRuntime.global().setProperty(jsiRuntime, "testCallback", std::move(testFunction));
    }

    // Class
    {
//        auto code = "function TestClass(param) { this.testProperty1 = param; }";
//        auto constructorFun = jsiRuntime.global().getPropertyAsFunction(jsiRuntime, "eval").call(jsiRuntime, code);

        auto code = std::make_shared<const jsi::StringBuffer>("function TestClass(param) { this.testProperty1 = param; }");
        jsiRuntime.evaluateJavaScript(code, "some description that is helpful in a call stack");
        auto testConstructor = jsiRuntime.global().getProperty(jsiRuntime, "TestClass").asObject(jsiRuntime);
        auto testPrototype = testConstructor.getProperty(jsiRuntime, "prototype").getObject(jsiRuntime);
        testPrototype.setProperty(jsiRuntime, "testProperty2", 55);
        testPrototype.setProperty(jsiRuntime, "testFunction", jsi::Function::createFromHostFunction(jsiRuntime, jsi::PropNameID::forAscii(jsiRuntime, "testFunction"), 0, [](jsi::Runtime& runtime, const jsi::Value& thisValue, const jsi::Value* arguments, size_t count) -> jsi::Value
        {
            thisValue.asObject(runtime).setProperty(runtime, "testProperty2", 66);
            return jsi::Value(runtime, jsi::String::createFromAscii(runtime, "this is a test function"));
        }));

//        auto testConstructor = jsi::Function::createFromHostFunction(jsiRuntime, jsi::PropNameID::forAscii(jsiRuntime, "TestClass"), 1, [](jsi::Runtime& runtime, const jsi::Value& thisValue, const jsi::Value* arguments, size_t count) -> jsi::Value
//        {
//            auto testObj = thisValue.asObject(runtime);
//            testObj.setProperty(runtime, "testProperty1", std::move(arguments[0]));
//            testObj.setProperty(runtime, "testFunction", jsi::Function::createFromHostFunction(runtime, jsi::PropNameID::forAscii(runtime, "testFunction"), 0, [](jsi::Runtime& runtime, const jsi::Value& thisValue, const jsi::Value* arguments, size_t count) -> jsi::Value
//            {
//                return jsi::Value(runtime, jsi::String::createFromAscii(runtime, "this is a test function"));
//            }));
//            return jsi::Value();
//        });
//        auto testPrototype = jsi::Object(jsiRuntime);
//        //auto testPrototype = testConstructor.getProperty(jsiRuntime, "prototype").getObject(jsiRuntime);
//        testPrototype.setProperty(jsiRuntime, "testProperty2", 55);
//        testConstructor.setProperty(jsiRuntime, "prototype", std::move(testPrototype));
//        jsiRuntime.global().setProperty(jsiRuntime, "TestClass", testConstructor);
    }
}